{"version":3,"file":"ngx-masonry.umd.min.js","sources":["~/ngx-masonry/src/app/ngx-masonry/ngx-masonry.component.ts","~/ngx-masonry/src/app/ngx-masonry/ngx-masonry.directive.ts","~/ngx-masonry/src/app/ngx-masonry/ngx-masonry.module.ts"],"sourcesContent":["import {\n\tComponent,\n\tOnInit,\n\tOnDestroy,\n\tInput,\n\tOutput,\n\tElementRef,\n\tEventEmitter,\n\tPLATFORM_ID,\n\tInject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nvar /** @type {?} */ imagesLoaded: any = undefined;\nvar /** @type {?} */ masonryConstructor: any = undefined;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options.interface';\nexport class NgxMasonryComponent implements OnInit, OnDestroy {\n/**\n * @param {?} platformId\n * @param {?} _element\n */\nconstructor(\nprivate platformId: any,\nprivate _element: ElementRef) {}\npublic _msnry: any;\npublic options: NgxMasonryOptions;\npublic useImagesLoaded: Boolean = false;\n\n\t// Outputs\n\t layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\t removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n/**\n * @return {?}\n */\nngOnInit() {\n\t\t///TODO: How to load imagesloaded only if this.useImagesLoaded===true?\n\t\tif (this.useImagesLoaded && imagesLoaded === undefined) {\n\t\t\timagesLoaded = require('imagesloaded');\n\t\t}\n\n\t\tif (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n\t\t\tmasonryConstructor = require('masonry-layout');\n\t\t}\n\n\t\t// Create masonry options object\n\t\tif (!this.options) this.options = {};\n\n\t\t// Set default itemSelector\n\t\tif (!this.options.itemSelector) {\n\t\t\tthis.options.itemSelector = '[ngx-masonry-item], ngx-masonry-item';\n\t\t}\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\t// Initialize Masonry\n\t\t\tthis._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n\t\t\t// Bind to events\n\t\t\tthis._msnry.on('layoutComplete', (items: any) => {\n\t\t\t\tthis.layoutComplete.emit(items);\n\t\t\t});\n\t\t\tthis._msnry.on('removeComplete', (items: any) => {\n\t\t\t\tthis.removeComplete.emit(items);\n\t\t\t});\n\t\t}\n\t}\n/**\n * @return {?}\n */\nngOnDestroy() {\n\t\tif (this._msnry) {\n\t\t\tthis._msnry.destroy();\n\t\t}\n\t}\n/**\n * @return {?}\n */\npublic layout() {\n\t\tsetTimeout(() => {\n\t\t\tthis._msnry.layout();\n\t\t});\n\t}\n/**\n * @return {?}\n */\npublic reloadItems() {\n\t\tsetTimeout(() => {\n\t\t\tthis._msnry.reloadItems();\n\t\t});\n\t}\n/**\n * @param {?} element\n * @return {?}\n */\npublic add(element: HTMLElement) {\n\t\tvar /** @type {?} */ isFirstItem = false;\n\n\t\t// Check if first item\n\t\tif (this._msnry.items.length === 0) {\n\t\t\tisFirstItem = true;\n\t\t}\n\n\t\tif (this.useImagesLoaded) {\n\t\t\timagesLoaded(element, (instance: any) => {\n\t\t\t\tthis._element.nativeElement.appendChild(element);\n\n\t\t\t\t// Tell Masonry that a child element has been added\n\t\t\t\tthis._msnry.appended(element);\n\n\t\t\t\t// layout if first item\n\t\t\t\tif (isFirstItem) this.layout();\n\t\t\t});\n\n\t\t\tthis._element.nativeElement.removeChild(element);\n\t\t} else {\n\t\t\t// Tell Masonry that a child element has been added\n\t\t\tthis._msnry.appended(element);\n\n\t\t\t// layout if first item\n\t\t\tif (isFirstItem) this.layout();\n\t\t}\n\t}\n/**\n * @param {?} element\n * @return {?}\n */\npublic remove(element: HTMLElement) {\n\t\t// Tell Masonry that a child element has been removed\n\t\tthis._msnry.remove(element);\n\n\t\t// Layout items\n\t\tthis.layout();\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n\tselector: '[ngx-masonry], ngx-masonry',\n\ttemplate: '<ng-content></ng-content>',\n\tstyles: [\n\t\t`\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n\t]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'useImagesLoaded': [{ type: Input },],\n'layoutComplete': [{ type: Output },],\n'removeComplete': [{ type: Output },],\n};\n}\n\nfunction NgxMasonryComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryComponent.ctorParameters;\n/** @type {?} */\nNgxMasonryComponent.propDecorators;\n/** @type {?} */\nNgxMasonryComponent.prototype._msnry;\n/** @type {?} */\nNgxMasonryComponent.prototype.options;\n/** @type {?} */\nNgxMasonryComponent.prototype.useImagesLoaded;\n/** @type {?} */\nNgxMasonryComponent.prototype.layoutComplete;\n/** @type {?} */\nNgxMasonryComponent.prototype.removeComplete;\n/** @type {?} */\nNgxMasonryComponent.prototype.platformId;\n/** @type {?} */\nNgxMasonryComponent.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { isPlatformBrowser } from '@angular/common';\n\ninterface MutationWindow extends Window {\n\tMutationObserver: any;\n\tWebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\nexport class NgxMasonryDirective implements OnDestroy, AfterViewInit {\n/**\n * @param {?} _element\n * @param {?} _parent\n * @param {?} platformId\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _parent: NgxMasonryComponent,\nprivate platformId: any\n\t) {}\n/**\n * @return {?}\n */\nngAfterViewInit() {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis._parent.add(this._element.nativeElement);\n\t\t\tthis.watchForHtmlChanges();\n\t\t}\n\t}\n/**\n * @return {?}\n */\nngOnDestroy() {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis._parent.remove(this._element.nativeElement);\n\t\t}\n\t}\n/**\n * When HTML in brick changes dinamically, observe that and change layout\n * @return {?}\n */\nprivate watchForHtmlChanges(): void {\n\t\tMutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n\t\tif (MutationObserver) {\n/**\n * Watch for any changes to subtree\n */\nlet self = this;\n\t\t\tlet /** @type {?} */ observer = new MutationObserver(function(mutations, observerFromElement) {\n\t\t\t\tself._parent.layout();\n\t\t\t});\n\n\t\t\t// define what element should be observed by the observer\n\t\t\t// and what types of mutations trigger the callback\n\t\t\tobserver.observe(this._element.nativeElement, {\n\t\t\t\tsubtree: true,\n\t\t\t\tchildList: true\n\t\t\t});\n\t\t}\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n\tselector: '[ngx-masonry-item], ngx-masonry-item'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgxMasonryComponent, decorators: [{ type: Inject, args: [forwardRef(() => NgxMasonryComponent), ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n];\n}\n\nfunction NgxMasonryDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryDirective.ctorParameters;\n/** @type {?} */\nNgxMasonryDirective.prototype._element;\n/** @type {?} */\nNgxMasonryDirective.prototype._parent;\n/** @type {?} */\nNgxMasonryDirective.prototype.platformId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/*-- ngx-masonry --*/\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\nexport class NgxMasonryModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n\timports: [\n\t\tCommonModule\n\t],\n\texports: [\n\t\tNgxMasonryComponent,\n\t\tNgxMasonryDirective\n\t],\n\tdeclarations: [\n\t\tNgxMasonryComponent,\n\t\tNgxMasonryDirective\n\t]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxMasonryModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["imagesLoaded","undefined","masonryConstructor","NgxMasonryComponent","platformId","_element","this","useImagesLoaded","layoutComplete","EventEmitter","removeComplete","prototype","ngOnInit","_this","require","isPlatformBrowser","options","itemSelector","_msnry","nativeElement","on","items","emit","ngOnDestroy","destroy","layout","setTimeout","reloadItems","add","element","isFirstItem","length","instance","appendChild","appended","removeChild","remove","decorators","type","Component","args","selector","template","styles","ctorParameters","Inject","PLATFORM_ID","ElementRef","propDecorators","Input","Output","NgxMasonryDirective","_parent","ngAfterViewInit","watchForHtmlChanges","MutationObserver","window","WebKitMutationObserver","self_1","mutations","observerFromElement","observe","subtree","childList","Directive","forwardRef","NgxMasonryModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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"}
