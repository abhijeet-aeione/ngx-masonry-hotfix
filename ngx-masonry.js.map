{"version":3,"file":"ngx-masonry.js","sources":["ts/ngx-masonry.ts","ts/src/app/ngx-masonry/ngx-masonry.module.ts","ts/src/app/ngx-masonry/ngx-masonry.directive.ts","ts/src/app/ngx-masonry/ngx-masonry.component.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {NgxMasonryModule,NgxMasonryComponent,NgxMasonryDirective,NgxMasonryOptions} from './index';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/*-- ngx-masonry --*/\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\nexport class NgxMasonryModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n\timports: [\n\t\tCommonModule\n\t],\n\texports: [\n\t\tNgxMasonryComponent,\n\t\tNgxMasonryDirective\n\t],\n\tdeclarations: [\n\t\tNgxMasonryComponent,\n\t\tNgxMasonryDirective\n\t]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxMasonryModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { isPlatformBrowser } from '@angular/common';\n\ninterface MutationWindow extends Window {\n\tMutationObserver: any;\n\tWebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\nexport class NgxMasonryDirective implements OnDestroy, AfterViewInit {\n/**\n * @param {?} _element\n * @param {?} _parent\n * @param {?} platformId\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _parent: NgxMasonryComponent,\nprivate platformId: any\n\t) {}\n/**\n * @return {?}\n */\nngAfterViewInit() {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis._parent.add(this._element.nativeElement);\n\t\t\tthis.watchForHtmlChanges();\n\t\t}\n\t}\n/**\n * @return {?}\n */\nngOnDestroy() {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis._parent.remove(this._element.nativeElement);\n\t\t}\n\t}\n/**\n * When HTML in brick changes dinamically, observe that and change layout\n * @return {?}\n */\nprivate watchForHtmlChanges(): void {\n\t\tMutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n\t\tif (MutationObserver) {\n/**\n * Watch for any changes to subtree\n */\nlet self = this;\n\t\t\tlet /** @type {?} */ observer = new MutationObserver(function(mutations, observerFromElement) {\n\t\t\t\tself._parent.layout();\n\t\t\t});\n\n\t\t\t// define what element should be observed by the observer\n\t\t\t// and what types of mutations trigger the callback\n\t\t\tobserver.observe(this._element.nativeElement, {\n\t\t\t\tsubtree: true,\n\t\t\t\tchildList: true\n\t\t\t});\n\t\t}\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n\tselector: '[ngx-masonry-item], ngx-masonry-item'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgxMasonryComponent, decorators: [{ type: Inject, args: [forwardRef(() => NgxMasonryComponent), ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n];\n}\n\nfunction NgxMasonryDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryDirective.ctorParameters;\n/** @type {?} */\nNgxMasonryDirective.prototype._element;\n/** @type {?} */\nNgxMasonryDirective.prototype._parent;\n/** @type {?} */\nNgxMasonryDirective.prototype.platformId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n\tComponent,\n\tOnInit,\n\tOnDestroy,\n\tInput,\n\tOutput,\n\tElementRef,\n\tEventEmitter,\n\tPLATFORM_ID,\n\tInject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nvar /** @type {?} */ imagesLoaded: any = undefined;\nvar /** @type {?} */ masonryConstructor: any = undefined;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options.interface';\nexport class NgxMasonryComponent implements OnInit, OnDestroy {\n/**\n * @param {?} platformId\n * @param {?} _element\n */\nconstructor(\nprivate platformId: any,\nprivate _element: ElementRef) {}\npublic _msnry: any;\npublic options: NgxMasonryOptions;\npublic useImagesLoaded: Boolean = false;\n\n\t// Outputs\n\t layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\t removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n/**\n * @return {?}\n */\nngOnInit() {\n\t\t///TODO: How to load imagesloaded only if this.useImagesLoaded===true?\n\t\tif (this.useImagesLoaded && imagesLoaded === undefined) {\n\t\t\timagesLoaded = require('imagesloaded');\n\t\t}\n\n\t\tif (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n\t\t\tmasonryConstructor = require('masonry-layout');\n\t\t}\n\n\t\t// Create masonry options object\n\t\tif (!this.options) this.options = {};\n\n\t\t// Set default itemSelector\n\t\tif (!this.options.itemSelector) {\n\t\t\tthis.options.itemSelector = '[ngx-masonry-item], ngx-masonry-item';\n\t\t}\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\t// Initialize Masonry\n\t\t\tthis._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n\t\t\t// Bind to events\n\t\t\tthis._msnry.on('layoutComplete', (items: any) => {\n\t\t\t\tthis.layoutComplete.emit(items);\n\t\t\t});\n\t\t\tthis._msnry.on('removeComplete', (items: any) => {\n\t\t\t\tthis.removeComplete.emit(items);\n\t\t\t});\n\t\t}\n\t}\n/**\n * @return {?}\n */\nngOnDestroy() {\n\t\tif (this._msnry) {\n\t\t\tthis._msnry.destroy();\n\t\t}\n\t}\n/**\n * @return {?}\n */\npublic layout() {\n\t\tsetTimeout(() => {\n\t\t\tthis._msnry.layout();\n\t\t});\n\t}\n/**\n * @return {?}\n */\npublic reloadItems() {\n\t\tsetTimeout(() => {\n\t\t\tthis._msnry.reloadItems();\n\t\t});\n\t}\n/**\n * @param {?} element\n * @return {?}\n */\npublic add(element: HTMLElement) {\n\t\tvar /** @type {?} */ isFirstItem = false;\n\n\t\t// Check if first item\n\t\tif (this._msnry.items.length === 0) {\n\t\t\tisFirstItem = true;\n\t\t}\n\n\t\tif (this.useImagesLoaded) {\n\t\t\timagesLoaded(element, (instance: any) => {\n\t\t\t\tthis._element.nativeElement.appendChild(element);\n\n\t\t\t\t// Tell Masonry that a child element has been added\n\t\t\t\tthis._msnry.appended(element);\n\n\t\t\t\t// layout if first item\n\t\t\t\tif (isFirstItem) this.layout();\n\t\t\t});\n\n\t\t\tthis._element.nativeElement.removeChild(element);\n\t\t} else {\n\t\t\t// Tell Masonry that a child element has been added\n\t\t\tthis._msnry.appended(element);\n\n\t\t\t// layout if first item\n\t\t\tif (isFirstItem) this.layout();\n\t\t}\n\t}\n/**\n * @param {?} element\n * @return {?}\n */\npublic remove(element: HTMLElement) {\n\t\t// Tell Masonry that a child element has been removed\n\t\tthis._msnry.remove(element);\n\n\t\t// Layout items\n\t\tthis.layout();\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n\tselector: '[ngx-masonry], ngx-masonry',\n\ttemplate: '<ng-content></ng-content>',\n\tstyles: [\n\t\t`\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n\t]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'useImagesLoaded': [{ type: Input },],\n'layoutComplete': [{ type: Output },],\n'removeComplete': [{ type: Output },],\n};\n}\n\nfunction NgxMasonryComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryComponent.ctorParameters;\n/** @type {?} */\nNgxMasonryComponent.propDecorators;\n/** @type {?} */\nNgxMasonryComponent.prototype._msnry;\n/** @type {?} */\nNgxMasonryComponent.prototype.options;\n/** @type {?} */\nNgxMasonryComponent.prototype.useImagesLoaded;\n/** @type {?} */\nNgxMasonryComponent.prototype.layoutComplete;\n/** @type {?} */\nNgxMasonryComponent.prototype.removeComplete;\n/** @type {?} */\nNgxMasonryComponent.prototype.platformId;\n/** @type {?} */\nNgxMasonryComponent.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":";;;AGcA,IAAI,YAAA,GAAoB,SAAA,CAAU;AAClC,IAAI,kBAAA,GAA0B,SAAA,CAAU;AAGxC,AAAA,MAAA,mBAAA,CAAA;;;;;IAKA,WAAA,CAFsB,UAAY,EAAa,QAAU,EAEzD;QAFsB,IAAtB,CAAA,UAAsB,GAAA,UAAA,CAAY;QAAa,IAA/C,CAAA,QAA+C,GAAA,QAAA,CAAU;QAMhD,IAAT,CAAA,eAAS,GAA2B,KAAA,CAAM;;QAIxC,IAAF,CAAA,cAAgB,GADwB,IAAI,YAAA,EAAmB,CAAG;QAEhE,IAAF,CAAA,cAAgB,GADwB,IAAI,YAAA,EAAmB,CAAG;KAVE;;;;IAepE,QAHE,GAGF;;QAEE,IAAI,IAHC,CAAI,eAAC,IAAkB,YAAA,KAAiB,SAAA,EAAW;YAIvD,YAAY,GAHG,OAAA,CAAQ,cAAC,CAAc,CAAC;SAIvC;QAED,IAAI,iBAHC,CAAiB,IAAC,CAAI,UAAC,CAAU,IAAI,kBAAA,KAAuB,SAAA,EAAW;YAI3E,kBAAkB,GAHG,OAAA,CAAQ,gBAAC,CAAgB,CAAC;SAI/C;;QAGD,IAAI,CAHC,IAAC,CAAI,OAAC;YAAQ,IAAA,CAAK,OAAC,GAAS,EAAA,CAAG;;QAMrC,IAAI,CAHC,IAAC,CAAI,OAAC,CAAO,YAAC,EAAa;YAI/B,IAAI,CAHC,OAAC,CAAO,YAAC,GAAc,sCAAA,CAAuC;SAInE;QAED,IAAI,iBAHC,CAAiB,IAAC,CAAI,UAAC,CAAU,EAAE;;YAKvC,IAAI,CAHC,MAAC,GAAQ,IAAI,kBAAA,CAAmB,IAAC,CAAI,QAAC,CAAQ,aAAC,EAAc,IAAA,CAAK,OAAC,CAAO,CAAC;;YAMhF,IAAI,CAHC,MAAC,CAAM,EAAC,CAAE,gBAAC,EAAiB,CAAA,KAAQ,KAG5C;gBACI,IAAI,CAHC,cAAC,CAAc,IAAC,CAAI,KAAC,CAAK,CAAC;aAIhC,CAHC,CAAC;YAIH,IAAI,CAHC,MAAC,CAAM,EAAC,CAAE,gBAAC,EAAiB,CAAA,KAAQ,KAG5C;gBACI,IAAI,CAHC,cAAC,CAAc,IAAC,CAAI,KAAC,CAAK,CAAC;aAIhC,CAHC,CAAC;SAIH;KACD;;;;IAIF,WALE,GAKF;QACE,IAAI,IALC,CAAI,MAAC,EAAO;YAMhB,IAAI,CALC,MAAC,CAAM,OAAC,EAAO,CAAE;SAMtB;KACD;;;;IAHA,MAAA,GAAF;QAQE,UAAU,CAPC,MAOb;YACG,IAAI,CAPC,MAAC,CAAM,MAAC,EAAM,CAAE;SAQrB,CAPC,CAAC;KAQH;;;;IALA,WAAA,GAAF;QAUE,UAAU,CATC,MASb;YACG,IAAI,CATC,MAAC,CAAM,WAAC,EAAW,CAAE;SAU1B,CATC,CAAC;KAUH;;;;;IANA,GAAA,CAAA,OAAA,EAAF;QAYE,qBAXI,WAAA,GAAc,KAAA,CAAM;;QAcxB,IAAI,IAXC,CAAI,MAAC,CAAM,KAAC,CAAK,MAAC,KAAU,CAAA,EAAG;YAYnC,WAAW,GAXG,IAAA,CAAK;SAYnB;QAED,IAAI,IAXC,CAAI,eAAC,EAAgB;YAYzB,YAAY,CAXC,OAAC,EAAQ,CAAA,QAAW,KAWpC;gBACI,IAAI,CAXC,QAAC,CAAQ,aAAC,CAAa,WAAC,CAAW,OAAC,CAAO,CAAC;;gBAcjD,IAAI,CAXC,MAAC,CAAM,QAAC,CAAQ,OAAC,CAAO,CAAC;;gBAc9B,IAAI,WAXC;oBAAY,IAAA,CAAK,MAAC,EAAM,CAAE;aAY/B,CAXC,CAAC;YAaH,IAAI,CAXC,QAAC,CAAQ,aAAC,CAAa,WAAC,CAAW,OAAC,CAAO,CAAC;SAYjD;aAXM;;YAaN,IAAI,CAXC,MAAC,CAAM,QAAC,CAAQ,OAAC,CAAO,CAAC;;YAc9B,IAAI,WAXC;gBAAY,IAAA,CAAK,MAAC,EAAM,CAAE;SAY/B;KACD;;;;;IATA,MAAA,CAAA,OAAA,EAAF;;QAgBE,IAAI,CAdC,MAAC,CAAM,MAAC,CAAM,OAAC,CAAO,CAAC;;QAiB5B,IAAI,CAdC,MAAC,EAAM,CAAE;KAed;;AAbK,mBAAP,CAAA,UAAO,GAAoC;IAe3C,EAdE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAexB,QAAQ,EAdE,4BAAA;gBAeV,QAAQ,EAdE,2BAAA;gBAeV,MAAM,EAdE;oBAeP,CAAF;;;;CAIA,CAAE;iBAbA;aAeD,EAdC,EAAG;CAeJ,CAdC;;;;AAED,mBAAD,CAAA,cAAC,GAAA,MAAA;IAiBD,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAG,EAAC;IAC1E,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,CAAC;AAfK,mBAAP,CAAA,cAAO,GAAyD;IAiBhE,SAAS,EAhBE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAiB5B,iBAAiB,EAhBE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAiBpC,gBAAgB,EAhBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAiBpC,gBAAgB,EAhBE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAiBnC,CAhBC;;ADpIF,MAAA,mBAAA,CAAA;;;;;;IAMA,WAAA,CAFU,QAAU,EAEV,OAAS,EACR,UAAY,EADvB;QAFU,IAAV,CAAA,QAAU,GAAA,QAAA,CAAU;QAEV,IAAV,CAAA,OAAU,GAAA,OAAA,CAAS;QACR,IAAX,CAAA,UAAW,GAAA,UAAA,CAAY;KAGlB;;;;IAIL,eAJE,GAIF;QACE,IAAI,iBAJC,CAAiB,IAAC,CAAI,UAAC,CAAU,EAAE;YAKvC,IAAI,CAJC,OAAC,CAAO,GAAC,CAAG,IAAC,CAAI,QAAC,CAAQ,aAAC,CAAa,CAAC;YAK9C,IAAI,CAJC,mBAAC,EAAmB,CAAE;SAK3B;KACD;;;;IAIF,WANE,GAMF;QACE,IAAI,iBANC,CAAiB,IAAC,CAAI,UAAC,CAAU,EAAE;YAOvC,IAAI,CANC,OAAC,CAAO,MAAC,CAAM,IAAC,CAAI,QAAC,CAAQ,aAAC,CAAa,CAAC;SAOjD;KACD;;;;;IAHA,mBAAA,GAAF;QASE,gBAAgB,GARG,MAAA,CAAO,gBAAC,IAAmB,MAAA,CAAO,sBAAC,CAAsB;QAU5E,IAAI,gBARC,EAAiB;;;;YAYxB,IAVI,IAAA,GAAA,IAAA,CAAA;YAWD,qBAVI,QAAA,GAAW,IAAI,gBAAA,CAAiB,UAAC,SAAS,EAAU,mBAAA,EAU3D;gBACI,IAAI,CAVC,OAAC,CAAO,MAAC,EAAM,CAAE;aAWtB,CAVC,CAAC;;;YAcH,QAAQ,CAVC,OAAC,CAAO,IAAC,CAAI,QAAC,CAAQ,aAAC,EAAc;gBAW7C,OAAO,EAVE,IAAA;gBAWT,SAAS,EAVE,IAAA;aAWX,CAVC,CAAC;SAWH;KACD;;AATK,mBAAP,CAAA,UAAO,GAAoC;IAW3C,EAVE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAWxB,QAAQ,EAVE,sCAAA;aAWV,EAVC,EAAG;CAWJ,CAVC;;;;AAED,mBAAD,CAAA,cAAC,GAAA,MAAA;IAaD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,mBAAmB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,mBAAmB,CAAC,EAAG,EAAE,EAAG,EAAC;IAC9G,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAG,EAAC;CACzE,CAAC;;ADxEF;AAEA,AAEA,MAAA,gBAAA,CAAA;;AACsC,gBAAtC,CAAA,UAAsC,GAAoC;IAA1E,EACE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAAvB,OAAO,EACE;oBAAR,YAAY;iBACZ;gBACD,OAAO,EACE;oBAAR,mBAAmB;oBACnB,mBAAmB;iBACnB;gBACD,YAAY,EACE;oBAAb,mBAAmB;oBACnB,mBAAmB;iBACnB;aACD,EACC,EAAG;CAAJ,CACC;;;;AAED,gBAAD,CAAA,cAAC,GAAA,MAAA,EAEA,CANgC;;ADpBjC;;GAEG;;;;"}
